diff --git a/BUILD.bazel b/BUILD.bazel
index 044dc1f..fa08af6 100644
--- a/BUILD.bazel
+++ b/BUILD.bazel
@@ -5,3 +5,12 @@
 licenses(["notice"])
 
 exports_files(["LICENSE"])
+
+platform(
+    name = "x64_windows-clang-cl",
+    constraint_values = [
+        "@platforms//cpu:x86_64",
+        "@platforms//os:windows",
+        "@bazel_tools//tools/cpp:clang-cl",
+    ],
+)
diff --git a/quiche/BUILD.bazel b/quiche/BUILD.bazel
index 718fcda..7b4e30a 100644
--- a/quiche/BUILD.bazel
+++ b/quiche/BUILD.bazel
@@ -565,3 +565,49 @@ alias(
     actual = ":quiche_test_support",
     visibility = ["//visibility:public"],
 )
+
+load("cc_static_library.bzl", "cc_static_library")
+
+cc_library(
+    name = "moqt_library",
+    srcs = glob([
+        "quic/moqt/*.cc",
+    ], exclude = [
+        "quic/moqt/*_test.cc",
+        "quic/moqt/test_tools/**",
+        "quic/moqt/tools/**",
+    ]),
+    hdrs = glob([
+        "quic/moqt/*.h",
+    ], exclude = [
+        "quic/moqt/test_tools/**",
+        "quic/moqt/tools/**",
+    ]),
+    defines = [
+    ],
+    deps = [
+        ":quiche_core",
+        "@com_google_absl//absl/algorithm:container",
+        "@com_google_absl//absl/base",
+        "@com_google_absl//absl/base:core_headers",
+        "@com_google_absl//absl/cleanup",
+        "@com_google_absl//absl/container:btree",
+        "@com_google_absl//absl/container:fixed_array",
+        "@com_google_absl//absl/container:flat_hash_map",
+        "@com_google_absl//absl/container:flat_hash_set",
+        "@com_google_absl//absl/container:node_hash_map",
+        "@com_google_absl//absl/functional:bind_front",
+        "@com_google_absl//absl/memory",
+        "@com_google_absl//absl/status",
+        "@com_google_absl//absl/status:statusor",
+        "@com_google_absl//absl/strings",
+        "@com_google_absl//absl/types:span",
+    ],
+)
+
+cc_static_library(
+    name = "moqt",
+    deps = [
+        ":moqt_library",
+    ],
+)
diff --git a/quiche/cc_static_library.bzl b/quiche/cc_static_library.bzl
new file mode 100644
index 0000000..99b70ce
--- /dev/null
+++ b/quiche/cc_static_library.bzl
@@ -0,0 +1,61 @@
+load("@bazel_tools//tools/cpp:toolchain_utils.bzl", "find_cpp_toolchain", "use_cpp_toolchain")
+
+# 依存するオブジェクトファイルを集めて静的ライブラリを作る
+def _impl(ctx):
+    cc_toolchain = find_cpp_toolchain(ctx)
+    windows_constraint = ctx.attr._windows_constraint[platform_common.ConstraintValueInfo]
+    macos_constraint = ctx.attr._macos_constraint[platform_common.ConstraintValueInfo]
+
+    if ctx.target_platform_has_constraint(windows_constraint):
+        output = ctx.actions.declare_file("{}.lib".format(ctx.attr.name))
+    else:
+        output = ctx.actions.declare_file("lib{}.a".format(ctx.attr.name))
+
+    lib_sets = []
+    for dep in ctx.attr.deps:
+        lib_sets.append(dep[CcInfo].linking_context.linker_inputs)
+    input_depset = depset(transitive = lib_sets)
+
+    libs = []
+    # dep: LinkerInput
+    for dep in input_depset.to_list():
+        # lib: LibraryToLink
+        for lib in dep.libraries:
+            if lib.pic_static_library != None:
+                libs.append(lib.pic_static_library)
+            elif lib.static_library != None:
+                libs.append(lib.static_library)
+
+    lib_paths = [lib.path for lib in libs]
+
+    ar_path = cc_toolchain.ar_executable
+
+    if ctx.target_platform_has_constraint(windows_constraint):
+        command = "\"{0}\" /OUT:{1} {2}".format(ar_path, output.path, " ".join(lib_paths))
+    elif ctx.target_platform_has_constraint(macos_constraint):
+        command = '"{0}" -static -o {1} {2}'.format('libtool', output.path, " ".join(lib_paths))
+    else:
+        command = 'echo "CREATE {1}\n{2}\nSAVE\nEND\n" | "{0}" -M'.format(ar_path, output.path, "\n".join(["ADDLIB " + path for path in lib_paths]))
+
+    print(command)
+
+    ctx.actions.run_shell(
+        command = command,
+        inputs = libs + cc_toolchain.all_files.to_list(),
+        outputs = [output],
+        mnemonic = "Archive",
+        progress_message = "Archiving all files to {}".format(output.path),
+    )
+    return [
+        DefaultInfo(files = depset([output])),
+    ]
+
+cc_static_library = rule(
+    implementation = _impl,
+    attrs = {
+        "deps": attr.label_list(),
+        '_windows_constraint': attr.label(default = "@platforms//os:windows"),
+        '_macos_constraint': attr.label(default = "@platforms//os:macos"),
+    },
+    toolchains = use_cpp_toolchain(),
+)
